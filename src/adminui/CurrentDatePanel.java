/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package adminui;

import java.sql.Date;
import java.util.Calendar;
import java.util.GregorianCalendar;

/**
 *
 * @author Grapess
 */
public class CurrentDatePanel extends javax.swing.JPanel {

    GregorianCalendar gcal;

    public CurrentDatePanel() {
        initComponents();
        gcal = new GregorianCalendar();
        jcbYear.removeAllItems();
        jcbYear.addItem("Year");
        jcbMonth.removeAllItems();
        jcbMonth.addItem("Month");
        jcbDate.removeAllItems();
        jcbDate.addItem("Date");
        int currentyear = gcal.get(Calendar.YEAR);
        for (int year = currentyear; year >= 1950; year--) {
            jcbYear.addItem(year);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jcbYear = new javax.swing.JComboBox();
        jcbMonth = new javax.swing.JComboBox();
        jcbDate = new javax.swing.JComboBox();

        jcbYear.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jcbYear.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbYear.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbYearItemStateChanged(evt);
            }
        });

        jcbMonth.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jcbMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbMonth.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbMonthItemStateChanged(evt);
            }
        });

        jcbDate.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jcbDate.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jcbYear, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jcbDate, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jcbMonth, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                .addComponent(jcbDate, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE))
            .addComponent(jcbYear)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jcbYearItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbYearItemStateChanged
        int selected_month_index = jcbMonth.getSelectedIndex();
        int selected_date_index = jcbDate.getSelectedIndex();
        jcbMonth.removeAllItems();
        jcbMonth.addItem("Month");
        if (jcbYear.getSelectedIndex() > 0) {
            int selected_year = Integer.parseInt(jcbYear.getSelectedItem().toString());
            int current_year = gcal.get(Calendar.YEAR);
            MonthList[] months = MonthList.values();
            int end_index = months.length - 1;
            if (selected_year == current_year) {
                end_index = gcal.get(Calendar.MONTH);
            }
            for (int index = 0; index <= end_index; index++) {
                jcbMonth.addItem(months[index]);
            }
            if (selected_month_index < jcbMonth.getItemCount()) {
                jcbMonth.setSelectedIndex(selected_month_index);
            }
            if (selected_date_index < jcbDate.getItemCount()) {
                jcbDate.setSelectedIndex(selected_date_index);
            }
        }
    }//GEN-LAST:event_jcbYearItemStateChanged

    private void jcbMonthItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbMonthItemStateChanged
        int selected_date_index = jcbDate.getSelectedIndex();
        jcbDate.removeAllItems();
        jcbDate.addItem("Date");
        if (jcbMonth.getSelectedIndex() > 0) {
            int selected_year = Integer.parseInt(jcbYear.getSelectedItem().toString());
            int current_year = gcal.get(Calendar.YEAR);
            MonthList selected_month = (MonthList) jcbMonth.getSelectedItem();
            int current_month = gcal.get(Calendar.MONTH);
            int daterange = selected_month.getDaterange();
            if (selected_year == current_year && current_month == selected_month.ordinal()) {
                daterange = gcal.get(Calendar.DATE);
            } else if (selected_month == MonthList.February) {
                daterange = gcal.isLeapYear(selected_year) ? 29 : 28;
            }
            for (int date = 1; date <= daterange; date++) {
                jcbDate.addItem(date);
            }
            if (selected_date_index < jcbDate.getItemCount()) {
                jcbDate.setSelectedIndex(selected_date_index);
            }
        }
    }//GEN-LAST:event_jcbMonthItemStateChanged

    public Date getSelectedDate() {
        Date date = null;
        try {
            if (jcbYear.getSelectedIndex() > 0 && jcbMonth.getSelectedIndex() > 0 && jcbDate.getSelectedIndex() > 0) {
                int y = Integer.parseInt(jcbYear.getSelectedItem().toString());
                int m = jcbMonth.getSelectedIndex();
                int d = jcbDate.getSelectedIndex();
                String datevalue = y + "-" + m + "-" + d;
                date = Date.valueOf(datevalue);
            }
        } catch (Exception ex) {
        }
        return date;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jcbDate;
    private javax.swing.JComboBox jcbMonth;
    private javax.swing.JComboBox jcbYear;
    // End of variables declaration//GEN-END:variables

    public void setDate(Date date) {
        try {
            String[] values = date.toString().split("-");
            int y = Integer.parseInt(values[0]);
            int m = Integer.parseInt(values[1]);
            int d = Integer.parseInt(values[2]);
            for( int i = 1; i < jcbYear.getItemCount(); i++){
                int year = Integer.parseInt(jcbYear.getItemAt(i).toString());
                if(year == y ){
                    jcbYear.setSelectedIndex(i);
                    break;
                }
            }
            jcbMonth.setSelectedIndex(m);
            jcbDate.setSelectedIndex(d);
        } catch (Exception ex) {
        }
    }
}
