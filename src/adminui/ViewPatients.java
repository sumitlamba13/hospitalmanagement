/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package adminui;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import model.dao.PatientDiseaseDAO;
import model.dao.PatientInfoDAO;
import model.dao.PatientRoomDAO;
import model.to.PatientDiseaseTo;
import model.to.PatientInfoTo;
import model.to.PatientRoomTo;
import utility.CommonOperations;

/**
 *
 * @author HP
 */
public class ViewPatients extends javax.swing.JInternalFrame {

    /**
     * Creates new form ViewPatients
     */
    List<PatientInfoTo> allpateints;
    private int srow;
    private JPopupMenu popup;
    String str = "";

    public ViewPatients() {
        initComponents();
        setSize(1000, 600);
        setLocation(400, 100);
        jcbpatientname.removeAllItems();
        jcbpatientname.addItem("select any patient name");
        allpateints = new PatientInfoDAO().getAllRecord();
        for (PatientInfoTo pt : allpateints) {
            jcbpatientname.addItem(pt);
        }
        popup = new JPopupMenu();
        JMenuItem deleteitem = new JMenuItem("Delete Record");
        deleteitem.setFont(new Font("Arial", Font.BOLD, 20));
        JMenuItem edititem = new JMenuItem("Edit Record");
        edititem.setFont(new Font("Arial", Font.BOLD, 20));
        try {
            ImageIcon icon1;
            icon1 = new ImageIcon(getClass().getResource("/adminui/delete.png"));
            ImageIcon icon2;
            icon2 = new ImageIcon(getClass().getResource("/adminui/edit.png"));
            deleteitem.setIcon(icon1);
            edititem.setIcon(icon2);
        } catch (Exception ex) {
        }
        popup.add(deleteitem);
        popup.add(edititem);
        deleteitem.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                deleteRecord();
            }
        });
        edititem.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                editRecord();
            }

        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablepatient = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jcbpatientname = new javax.swing.JComboBox();
        btnviewdisease = new javax.swing.JButton();
        btnviewroom = new javax.swing.JButton();
        btnviewinfo = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("View Patient Details");

        tablepatient.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tablepatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablepatient.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablepatientMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablepatient);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setText("Choose Patient name:");

        jcbpatientname.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jcbpatientname.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnviewdisease.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnviewdisease.setText("View Patient Disease");
        btnviewdisease.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnviewdiseaseActionPerformed(evt);
            }
        });

        btnviewroom.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnviewroom.setText("View Patient Room");
        btnviewroom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnviewroomActionPerformed(evt);
            }
        });

        btnviewinfo.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnviewinfo.setText("View Patient Info");
        btnviewinfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnviewinfoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnviewinfo, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(btnviewdisease, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(153, 153, 153)
                        .addComponent(btnviewroom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(368, 368, 368))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(255, 255, 255)
                        .addComponent(jcbpatientname, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 791, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbpatientname, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnviewinfo, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnviewroom, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnviewdisease, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnviewinfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnviewinfoActionPerformed
        bindTableRecords();
    }//GEN-LAST:event_btnviewinfoActionPerformed

    private void btnviewdiseaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnviewdiseaseActionPerformed
        bindTableDisease();
    }//GEN-LAST:event_btnviewdiseaseActionPerformed

    private void btnviewroomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnviewroomActionPerformed
        bindTableRoom();
        
        JMenuItem discharge = new JMenuItem("Discharge the patient");
        discharge.setFont(new Font("Arial", Font.BOLD, 20));
        popup.add(discharge);
        try {
            ImageIcon icon;
            icon = new ImageIcon(getClass().getResource("/adminui/Heart-Patient.jpg"));
            discharge.setIcon(icon);
        } catch (Exception ex) {
        }
        discharge.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                updateRecord();
            }
        });
    }//GEN-LAST:event_btnviewroomActionPerformed

    private void tablepatientMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablepatientMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON3) {
            int point = tablepatient.rowAtPoint(evt.getPoint());
            tablepatient.getSelectionModel().setSelectionInterval(point, point);
            srow = tablepatient.getSelectedRow();
            popup.show(tablepatient, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_tablepatientMouseClicked
    public void deleteRecord() {
        PatientInfoTo pt = (PatientInfoTo) jcbpatientname.getSelectedItem();
        PatientRoomTo rt = new PatientRoomDAO().getRecords(pt.getPatient_id());
        List<PatientDiseaseTo> disease = new PatientDiseaseDAO().getAllRecord(pt.getPatient_id());
        if (srow != -1 && disease != null && srow < disease.size() && str.equals("disease")) {
            int result = JOptionPane.showConfirmDialog(this, "are you sure you want to remove this record?", "Message from system", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                PatientDiseaseTo pdt = disease.get(srow);
                PatientDiseaseDAO action = new PatientDiseaseDAO();
                String message = "";
                if (action.deleteRecord(pdt.getSr_no())) {
                    message = "record is deleted from database";
                    bindTableDisease();
                } else {
                    message = "record does not remove from database" + action.getErrormessage();
                }
                JOptionPane.showMessageDialog(this, message);
            }
        } else if (srow != -1 && pt != null && str.equals("patient")) {
            int result = JOptionPane.showConfirmDialog(this, "are you sure you want to remove this record?", "Message from system", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                PatientInfoDAO action = new PatientInfoDAO();
                String message = "";
                if (action.deleteRecord(pt.getPatient_id())) {
                    message = "record is deleted from database";
                    bindTableDisease();
                } else {
                    message = "record does not remove from database" + action.getErrormessage();
                }
                JOptionPane.showMessageDialog(this, message);
            }
        } else if (srow != -1 && rt != null && str.equals("room")) {
            int result = JOptionPane.showConfirmDialog(this, "are you sure you want to remove this record?", "Message from system", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                PatientRoomDAO action = new PatientRoomDAO();
                String message = "";
                if (action.deleteRecord(rt.getProom_id())) {
                    message = "record is deleted from database";
                    bindTableDisease();
                } else {
                    message = "record does not remove from database" + action.getErrormessage();
                }
                JOptionPane.showMessageDialog(this, message);
            }
        }
        srow = -1;
    }

    public void editRecord() {
        PatientInfoTo pt = (PatientInfoTo) jcbpatientname.getSelectedItem();
        PatientRoomTo rt = new PatientRoomDAO().getRecords(pt.getPatient_id());
        List<PatientDiseaseTo> disease = new PatientDiseaseDAO().getAllRecord(pt.getPatient_id());
        if (srow != -1) {
            if ("room".equals(str) && rt != null) {
                CommonOperations.openInternalFrame(getDesktopPane(), new EditPatientRoom(rt));
                dispose();
            } else if ("patient".equals(str) && pt != null) {
                CommonOperations.openInternalFrame(getDesktopPane(), new EditPatientDetails(pt));
                dispose();
            } else if ("disease".equals(str) && disease != null && srow < disease.size()) {
                CommonOperations.openInternalFrame(getDesktopPane(), new EditPatientDisease(disease.get(srow)));
                dispose();
            }
        }
    }

    public void updateRecord() {
        PatientInfoTo pt = (PatientInfoTo) jcbpatientname.getSelectedItem();
        PatientRoomTo rt = new PatientRoomDAO().getRecords(pt.getPatient_id());
        String message = "";
        if (rt.getDischarge_date() != null) {
            message = "Patient is already discharged";
        } else if (srow != -1 && rt != null) {
            int result = JOptionPane.showConfirmDialog(this, "Are You Sure To Dischage the Patient?", "Message From System", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                PatientRoomDAO action = new PatientRoomDAO();
                if (action.update(rt.getProom_id())) {
                    message = "Record is Updated in Database";
                    bindTableRoom();
                } else {
                    message = "Record does not Updated in Database";
                }
            }
        }
        JOptionPane.showMessageDialog(this, message);
        srow = -1;
    }

    protected void bindTableRecords() {
        PatientInfoTo patient = (PatientInfoTo) jcbpatientname.getSelectedItem();
        String[] col_name = {"Patient Id", "Patient name", "Contact No.", "D.O.B.", "Address", "Attendent"};
        Object[][] records = null;
        if (patient != null) {
            records = new Object[3][col_name.length];
            records[1] = new Object[]{patient.getPatient_id(), patient.getPatient_name(), patient.getContact_no(), patient.getDate_of_birth(), patient.getAddress(), patient.getAttendent()};
        } else {
            records = new Object[1][col_name.length];
            records[0] = new Object[]{"no records found", "no records found", "no records found", "no records found", "no records found", "no records found"};
        }
        DefaultTableModel dtm = new DefaultTableModel(records, col_name) {
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tablepatient.setModel(dtm);
        str = "patient";

    }

    protected void bindTableDisease() {
        PatientInfoTo patient = (PatientInfoTo) jcbpatientname.getSelectedItem();
        List<PatientDiseaseTo> disease = new PatientDiseaseDAO().getRecords(patient.getPatient_id());
        String[] col_name = {"Disease Id", "Disease Name"};
        Object[][] records = null;
        if (disease != null && disease.size() > 0) {
            records = new Object[disease.size()][col_name.length];
            int i = 0;
            for (PatientDiseaseTo pdt : disease) {
                records[i] = new Object[]{pdt.getDisease_id(), pdt.getDisease_name()};
                i++;
            }
        } else {
            records = new Object[1][col_name.length];
            records[0] = new Object[]{"no records found", "no records found"};
        }
        DefaultTableModel dtm = new DefaultTableModel(records, col_name) {
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tablepatient.setModel(dtm);
        str = "disease";

    }

    protected void bindTableRoom() {
        PatientInfoTo patient = (PatientInfoTo) jcbpatientname.getSelectedItem();
        PatientRoomTo room = new PatientRoomDAO().getRecords(patient.getPatient_id());
        String[] col_name = {"Room no.", "Admit Date", "Dischage Date", "Amount", "IsPaid"};
        Object[][] records = null;
        if (room != null) {
            records = new Object[3][col_name.length];
            records[1] = new Object[]{room.getRoom_id(), room.getAdmit_date(), room.getDischarge_date() != null ? room.getDischarge_date() : "Not Discharged", room.getAmount(), room.getIspaid() != null ? room.getIspaid() : "NO"};
        } else {
            records = new Object[1][col_name.length];
            records[0] = new Object[]{"no records found", "no records found", "no records found", "no records found", "no records found"};
        }
        DefaultTableModel dtm = new DefaultTableModel(records, col_name) {
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tablepatient.setModel(dtm);
        str = "room";
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnviewdisease;
    private javax.swing.JButton btnviewinfo;
    private javax.swing.JButton btnviewroom;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox jcbpatientname;
    private javax.swing.JTable tablepatient;
    // End of variables declaration//GEN-END:variables
}
