/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package adminui;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import model.dao.RoomTypeDAO;
import model.to.RoomTypeTo;
import utility.CommonOperations;

/**
 *
 * @author HP
 */
public class ViewRoomType extends javax.swing.JInternalFrame {

    List<RoomTypeTo> allroomtypes;
    private int typeid;
    JPopupMenu popup;
    public ViewRoomType() {
        initComponents();
        setSize(1000, 600);
        setLocation(400, 150);
        bindTableDetails();
        typeid=0;
        popup = new JPopupMenu();
        JMenuItem deleteitem = new JMenuItem("Delete Record");
        deleteitem.setFont(new Font("Arial", Font.BOLD, 20));
        JMenuItem edititem = new JMenuItem("Edit Record");
        edititem.setFont(new Font("Arial", Font.BOLD, 20));
        try {
            ImageIcon icon1;
            icon1 = new ImageIcon(getClass().getResource("/adminui/delete.png"));
            ImageIcon icon2;
            icon2 = new ImageIcon(getClass().getResource("/adminui/edit.png"));
            deleteitem.setIcon(icon1);
            edititem.setIcon(icon2);
        } catch (Exception ex) {
        }
        popup.add(deleteitem);
        popup.add(edititem);
        deleteitem.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                deleteRecord();
            }
        });
        edititem.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                editRecord();
            }
        });
    }
    public void deleteRecord(){
        if (typeid!=0) {
            int result = JOptionPane.showConfirmDialog(this, "are you sure you want to remove this record?", "Message from system", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                
                RoomTypeDAO action = new RoomTypeDAO();
                String message = "";
                if (action.deleteRecord(String.valueOf(typeid))) {
                    message = "record is deleted from database";
                    bindTableDetails();
                } else {
                    message = "record does not remove from database" + action.getErrormessage();
                }
                JOptionPane.showMessageDialog(this, message);
            }
        }
        typeid=0;
    }
    public void editRecord(){
        if (typeid!=0) {
            CommonOperations.openInternalFrame(getDesktopPane(), new AddRoomTypeDetails(String.valueOf(typeid)));
            dispose();
        }
    }
    public void bindTableDetails() {
        allroomtypes = new RoomTypeDAO().getAllRecord();
        String[] col_name = {"Type Id", "Type name", "Room Charges"};
        Object[][] records = null;
        if (allroomtypes != null && allroomtypes.size() > 0) {
            records = new Object[allroomtypes.size()][col_name.length];
            int i = 0;
            for (RoomTypeTo rt : allroomtypes) {
                records[i] = new Object[]{rt.getType_id(), rt.getType_name(), rt.getCharges()};
                i++;
            }
        } else {
            records = new Object[1][col_name.length];
            records[0] = new Object[]{"no records found", "no records found", "no records found"};
        }
        DefaultTableModel dtm = new DefaultTableModel(records, col_name) {
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tableroomtype.getTableHeader().setReorderingAllowed(false);
        tableroomtype.setModel(dtm);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableroomtype = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setTitle("View Room Type Details");

        tableroomtype.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableroomtype.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableroomtypeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableroomtype);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 942, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(52, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tableroomtypeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableroomtypeMouseClicked
        if(SwingUtilities.isRightMouseButton(evt)){
            int point = tableroomtype.rowAtPoint(evt.getPoint());
            tableroomtype.getSelectionModel().setSelectionInterval(point, point);
            int srow = tableroomtype.getSelectedRow();
            typeid = Integer.parseInt(tableroomtype.getValueAt(srow, 0).toString());
            popup.show(tableroomtype, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_tableroomtypeMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableroomtype;
    // End of variables declaration//GEN-END:variables
}
